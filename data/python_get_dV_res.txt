    def get_dV_res(self):
        r"""
        Get value for dV_res. dV_res is calculated from the mean flow duration curve over several years.
        The mean flow duration curve is obtained through dV_hist. If dV_hist is not given, dV_res is set to 0.
         Source for calculation of dV_res : "Wahl, Dimensionierung und Abnahme einer Kleinturbine" from PACER
        :return:
        float
        """
        if self.dV_hist is None :
            return 0
        else :
            recent=self.dV_hist.sort_index().iloc[self.dV_hist.count()-1].index[0]
            try:
                ten_years = datetime.datetime(recent.year - 10, recent.month, recent.day)+datetime.timedelta(days=1)
            except ValueError:
                ten_years = datetime.datetime(recent.year - 10, recent.month, recent.day - 1)+datetime.timedelta(days=1)
            dV_ten_years=self.dV_hist.sort_index().loc[ten_years:recent]
            dV_mean = dV_ten_years.groupby([dV_ten_years.index.month, dV_ten_years.index.day]).mean()
            mean_year = pd.Series(dV_mean['dV'].values, index=np.arange(1, len(dV_mean['dV'].values)+1, 1))
            mean_fdc = pd.Series(mean_year.sort_values(ascending=False).values, index=mean_year.index)
            dV_347 = mean_fdc.loc[347]
            if dV_347 <= 0.06:
                return 0.05
            elif dV_347 <= 0.16:
                return 0.05 + (dV_347 - 0.06) * 8 / 10
            elif dV_347 <= 0.5:
                return 0.130 + (dV_347 - 0.16) * 4.4 / 10
            elif dV_347 <= 2.5:
                return 0.28 + (dV_347 - 0.5) * 31 / 100
            elif dV_347 <= 10:
                return 0.9 + (dV_347 - 2.5) * 21.3 / 100
            elif dV_347 <= 60:
                return 2.5 + (dV_347 - 10) * 150 / 1000
            else:
                return 10